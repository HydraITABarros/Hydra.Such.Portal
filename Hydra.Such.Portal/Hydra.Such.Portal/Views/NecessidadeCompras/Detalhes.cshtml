@model Hydra.Such.Data.ViewModel.Nutrition.ProductivityUnitViewModel
@{
    ViewData["Title"] = "Necessidade Compra " + ViewBag.ProductivityUnitDesc;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="import" href="/lib/paper-tabs-master/paper-tab.html" />
<link rel="import" href="/lib/paper-tabs-master/paper-tabs.html" />
<link rel="import" href="/lib/iron-pages-master/iron-pages.html" />
<link rel="import" href="/lib/iron-menu-behavior/iron-menubar-behavior.html" />
<link rel="import" href="/lib/iron-form/iron-form.html" />
<link rel="import" href="/lib/paper-button/paper-button.html" />
<link rel="import" href="/lib/paper-button/paper-button.html" />
<link rel="import" href="/lib/paper-toast-master/paper-toast.html" />
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="/lib/vaadin-text-field/vaadin-text-field.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-filter.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-sorter.html">
<link rel="import" href="/lib/vaadin-grid/vaadin-grid-selection-column.html" />
<link rel="import" href="/lib/vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="/lib/vaadin-combo-box/vaadin-combo-box.html" />
<link rel="import" href="/lib/such-textarea/such-textarea.html">
<link rel="import" href="/lib/paper-collapse-item/paper-collapse-group.html">
<link rel="import" href="/lib/paper-collapse-item/paper-collapse-item.html">
<link rel="import" href="/lib/such-selectbox/such-selectbox.html">
<link rel="import" href="/lib/paper-dialog/paper-dialog.html" />
<link rel="import" href="/lib/paper-dialog-behavior/paper-dialog-behavior.html" />
<link rel="import" href="/lib/vaadin-valo-theme/vaadin-date-picker.html" />
<!--Datepicker com correção de bug que impede visualização nas grids -->
<link rel="import" href="/lib/vaadin-date-picker-3.0.0-alpha1/vaadin-date-picker.html">
<!--link rel="import" href="/lib/vaadin-date-picker/vaadin-date-picker.html"-->
<link rel="import" href="/lib/such-dropdown-menu/such-dropdown-menu.html" />

<x-needshopping></x-needshopping>
<dom-module id="x-needshopping">
    <template>
        <!-- STYLES -->
        <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="/lib/font-awesome-4.7.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="/css/main.css" />
        <style>
            vaadin-combo-box {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-date-picker {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-text-field {
                margin-top: 0px !important;
                width: 100%;
            }

            .break_clear {
                margin-top: 15px;
            }

            .panel-heading {
                font-size: 16px;
            }
            /*ACORDEÃO*/
            paper-collapse-item {
                --paper-item: {
                    padding: 0 0;
                };
                --paper-collapse-item-header: {
                    margin-top: -1px;
                    padding: 0 15px;
                    color: #333;
                    background-color: #f5f5f5;
                    border-bottom: solid #ddd 1px;
                    border-top-left-radius: 3px;
                    border-top-right-radius: 3px;
                    border-top:  solid #ddd 1px;
                };
            }
            /*
            .panel-body {
                padding-top: 0px !important;
            }*/
            .header {
                margin-top: -1px;
            }

            .spacer10 {
                height: 10px;
            }

            .spacer20 {
                height: 20px;
            }

            .spacer40 {
                height: 40px;
            }

            .spacer60 {
                height: 60px;
            }

            .grid--modal__wrapper {
                height: 86% !important;
            }

            .grid--modal {
                height: 100% !important;
            }
        </style>

        <div class="subMenu" hidden="{{ _permissionssubMenu }}">
            <paper-button class="tablinks" on-tap="_goBack" title="Voltar"><i class="fa fa-arrow-left" aria-hidden="true"></i> Voltar</paper-button>
            <paper-button class="tablinks" on-tap="_requestModels" hidden="{{ _NotSelectedprodUnit }}"><i class="fa fa-chevron-circle-down" aria-hidden="true"></i> Copiar Modelos de requisição</paper-button>
            <paper-button id="btn_AddRequesition" name="btn_AddRequesition" class="tablinks" on-tap="_addRequesition"><i class="fa fa-get-pocket" aria-hidden="true"></i> Criar Requisições </paper-button>
        </div><!--on-response="_gridListResponse"-->

        <iron-ajax url="/PopulateDropdowns/GetProdUnits" id="ajax_prodUnit" last-response="{{prodUnitValresult}}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/OpenOrderLines" id="ajax_nOrderLines" last-response="{{cbopenorderlines}}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/OpenOrderLines" id="ajax_nOrderGridLines" last-response="{{cbopenorderlinesGrid}}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/getOpenOrderLine" id="ajax_result" last-response="{{result}}" on-response="_resultResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/getOpenOrderLine" id="ajax_result2" last-response="{{result2}}" on-response="_GridprodChangeResult" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/getSupplier" id="ajax_supplierresult" last-response="{{supplierresult}}" on-response="_supplierResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/getSupplier" id="ajax_supplierGridresult" last-response="{{supplierGridresult}}" on-response="_supplierGridResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetUnitOfMeasureByCode" last-response="{{unitmeasureresult}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetpriceAgreementByDate" id="grid_priceAgreement_ajax" last-response="{{priceAgreement}}" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetpriceAgreementByDate" id="products_ajax" last-response="{{Products}}" method="post" handle-as="json" content-type="application/json"></iron-ajax>

        <iron-ajax url="/NecessidadeCompras/GetGridValues" id="ajax_getgrid" last-response="{{data}}" on-response="_getgridResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/UpdateShoppingNecessity" id="ajax_update" last-response="{{updatedata}}" method="post" on-response="_updateResponse" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/DeleteShoppingNecessity" id="ajax_delete" last-response="{{deletedata}}" method="post" on-response="_deleteResponse" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/CreateShoppingNecessity" id="ajax_Create" last-response="{{updatedata}}" method="post" on-response="_createResponse" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/GenerateRequesition" id="ajax_requesitionupdate" last-response="{{datarequesition}}" method="post" on-response="_requesitionResponse" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/GetModelRequisition" last-response="{{resultModelRequisition}}" auto method="post" handle-as="json" id="grid_databound_ajax" content-type="application/json"></iron-ajax>
        <iron-ajax url="/PopulateDropdowns/GetLocations" last-response="{{locationsresult}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/GetProductivityUnits" last-response="{{produnitresult}}" auto method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/GenerateByRequesition" id="grid_generatebyreq_ajax" last-response="{{genbyreqresult}}" on-response="_benbyreqResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/UpdateAgreementVendor" id="grid_updateAgreementByVendor_ajax" last-response="{{priceAgreementByVendor}}" on-response="_agreementByVendorResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/NecessidadeCompras/GetQuantidades" id="ajax_GetQuantidades" last-response="{{quantidadesResult}}" on-response="_getQuantidadesResponse" method="post" handle-as="json" content-type="application/json"></iron-ajax>
        <iron-ajax url="/ModelosRequisicao/GetContratosFornecedor" last-response="{{ContratosFornecedores}}" id="ajax_ContratosFornecedor_list" method="post" handle-as="json" content-type="application/json"></iron-ajax>


        <style>
            vaadin-combo-box {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-date-picker {
                margin-top: 0px !important;
                width: 100% !important;
            }

            vaadin-text-field {
                margin-top: 0px !important;
                width: 100%;
            }

            paper-button {
                margin-top: 10px;
            }

            .break_clear {
                margin-top: 15px;
                margin-right: 0px !important;
                margin-left: 0px !important;
            }

            .break_frm {
                margin-top: 15px;
            }

            .label_custom {
                color: var(--valo-contrast-60pct) !important;
                font-weight: 500 !important;
                font-size: var(--valo-font-size-s) !important;
                margin-left: calc(var(--valo-text-field-border-radius, var(--valo-border-radius)) / 4) !important;
                margin-bottom: var(--valo-space-xs) !important;
                transition: color 0.4s !important;
                line-height: 1 !important;
                font-family: var(--valo-font-family) !important;
            }

            datetime-picker {
                border-radius: var(--valo-text-field-border-radius, var(--valo-border-radius));
                background-color: var(--valo-contrast-5pct);
                color: var(--valo-contrast-60pct) !important;
                width: 100%;
            }

            .marginSpace {
                margin: 0px !important;
            }

            textarea {
                background-color: #f5f5f5;
                border: none;
                border-radius: 3px 4px;
                align-self: baseline;
                font-weight: 500;
            }

                textarea:hover {
                    background-color: #eeeeee;
                }

                textarea:focus {
                    background-color: white;
                    border: none;
                    outline: 1px solid #eeeeee;
                    border-radius: 3px 4px;
                }

            datetime-picker {
                --datetime-selected-background: #71BCC1 !important;
                --datetime-background: #1f3133;
                --datetime-color: #eeeeee;
            }

            paper-collapse-item {
                --paper-item: {
                padding: 0 0;
            };
                --paper-collapse-item-header: {
                 padding: 0 15px;
                 color: #333;
                 background-color: #f5f5f5;
                 border-bottom: solid #ddd 1px;
                 border-top-left-radius: 3px;
                 border-top-right-radius: 3px;

             };
            }

            .panel-body {
                padding-top: 0px !important;
            }
        </style>

        <vaadin-text-field id="prodUnitNoId" name="prodUnitNoName" label="Nº Unidade Produtiva" value="{{prodUnitNo}}" disabled hidden></vaadin-text-field>
        <vaadin-combo-box items="[[prodUnitValresult]]" id="prodUnitId" on-value-changed="_prodUnitChange" item-value-path="id" item-label-path="id" value="" label="Nº Unidade Produtiva" hidden>
            <template>
                <table width="350px">
                    <tr>
                        <td width="30%">[[item.id]]</td>
                        <td width="70%"><b>[[item.value]]</b></td>
                    </tr>
                </table>
            </template>
        </vaadin-combo-box>
        <vaadin-text-field id="descriptionUnitId" name="descriptionUnitName" label="Descrição" value="{{descriptionUnit}}" hidden></vaadin-text-field>
        <such-selectbox id="priceAgreement" value="" label="Acordo de Preços" hidden
                        items="[[priceAgreement]]"
                        text-path="noProcedimento"
                        value-path="noFornecedor"
                        fields='[{"field":"noProcedimento", "name":"Nº Procedimento"},{"field":"noFornecedor", "name":"Nº Fornecedor"},{"field":"codProduto", "name":"Nº Produto"}, {"field":"descricaoProduto", "name":"Descrição"},{"field":"custoUnitario", "name":"Custo Unitário"}]'>
        </such-selectbox>

        <div class="row" hidden="{{ !_permissionsVal.create }}">
            <div class="col-md-2">
                <vaadin-date-picker label="Data Receção Esperada" id="dpExpectedReceiptId" name="dpExpectedReceiptName" value="{{_expectedReceiptDate}}" required error-message="Este campo é obrigatório"></vaadin-date-picker>
            </div>

            <div class="col-md-2 ">
                <vaadin-date-picker label="Data p/ Preço Fornecedor" id="dpVendedorPriceId" name="dpVendedorPriceName" value="{{_pricesDate}}" on-value-changed="_DatePriceChange" required error-message="Este campo é obrigatório"></vaadin-date-picker>
            </div>

            <div class="col-md-3">
                <such-selectbox id="cmbProducts" name="cmbProducts" label="Produto" on-value-changed="_productChanged"
                                items="[[Products]]"
                                text-path="descricaoProduto"
                                value-path="produtoFornecedor"
                                fields='[{"field":"noProcedimento", "name":"Nº Acordo Preço"},
                                        {"field":"codProduto", "name":"Nº Produto"},
                                        {"field":"descricaoProduto", "name":"Descrição"},
                                        {"field":"itemCategoryCode", "name":"Cód. Categoria"},
                                        {"field":"custoUnitario", "name":"Custo Unitário"},
                                        {"field":"noFornecedor", "name":"Nº Fornecedor"},
                                        {"field":"noSubFornecedor", "name":"Nº SubFornecedor"}]'>
                    @*,{"field":"noContrato", "name":"Nº Contrato"}]'>*@
                </such-selectbox>
            </div>

            <div class="col-md-5">
                <vaadin-text-field id="supplierProdDescription2Id" name="supplierProdDescription2Name" label="Descrição 2 Produto" value="" maxlength="50"></vaadin-text-field>
            </div>
        </div>
        <div class="row" hidden="{{ !_permissionsVal.create }}">
            <div class="col-md-1">
                <vaadin-text-field id="qtyID" name="qtyName" placeholder="0.0000" pattern="^[0-9]\d*(\.[0-9]{1,4})?$" label="Quantidade" class="alignRight" value="{{qty}}" on-value-changed="_calcTotals" on-blur="_verificaMultiplo" required error-message="Este campo é obrigatório"></vaadin-text-field>
            </div>

            <div class="col-md-1">
                <vaadin-text-field id="qtyDisponivel" name="qtyDisponivel" label="Quant. Disponível" class="alignRight" disabled></vaadin-text-field>
            </div>

            <div class="col-md-1">
                <vaadin-text-field id="qtyReservada" name="qtyReservada" label="Quant. Reservada" class="alignRight" disabled></vaadin-text-field>
            </div>

            <div class="col-md-1">
                <vaadin-text-field id="supplierNoId" name="supplierNoName" label="Nº Fornecedor" value="{{supplierNo}}" disabled></vaadin-text-field>
                <vaadin-text-field id="subsupplierNoId" name="subsupplierNoId" label="Nº SubForncedor" value="{{subsupplierNo}}" disabled hidden></vaadin-text-field>
            </div>

            <div class="col-md-4">
                <vaadin-text-field id="SupplierNameId" name="SupplierName" label="Nome Fornecedor" value="{{SupplierName}}" disabled></vaadin-text-field>
                <vaadin-text-field id="subSupplierNameId" name="subSupplierName" label="Nome SubFornecedor" value="{{subSupplierName}}" disabled hidden></vaadin-text-field>
            </div>

            <div class="col-md-4">
                <vaadin-text-field id="subSupplierNameId" name="subSupplierName" label="Nome SubFornecedor" value="{{subSupplierName}}" disabled></vaadin-text-field>
            </div>
        </div>
        <div class="row" hidden="{{ !_permissionsVal.create }}">
            <div class="col-md-2">
                <such-selectbox id="unitofMeasureCodeId" value="" label="Unidade Medida" disabled
                                items="[[unitmeasureresult]]"
                                text-path="value"
                                value-path="id"
                                fields='[{"field":"id", "name":"Código"}, {"field":"value", "name":"Descrição"}]'>
                </such-selectbox>
            </div>

            <div class="col-md-2 ">
                <vaadin-text-field id="unitCostId" name="unitCostName" label="Custo Unitário" class="alignRight" value="{{unitCost}}" on-value-changed="_calcTotals" disabled><div slot="suffix">€</div></vaadin-text-field>
            </div>

            <div class="col-md-2 " hidden>
                <vaadin-text-field id="unitCostSubSupplierId" name="unitCostSubSupplierId" label="Custo Unitário SubFornecedor" class="alignRight" value="{{directUnitCostSubSupplier}}" disabled><div slot="suffix">€</div></vaadin-text-field>
            </div>

            <div class="col-md-2 ">
                <vaadin-text-field id="supplierProdCodeId" name="supplierProdCodeName" label="Codigo Produto Fornecedor" value=""></vaadin-text-field>
            </div>
            @*<div class="col-md-3 ">
                <vaadin-text-field id="txtProdDescription" name="txtProdDescription" label="Descrição Produto" value="{{prodDescription}}" disabled></vaadin-text-field>
            </div>*@
            <div class="col-md-6">
                <vaadin-text-field id="supplierProdDescriptionId" name="supplierProdDescriptionName" label="Descrição Produto Fornecedor" value="" maxlength="100"></vaadin-text-field>
            </div>
        </div>
        <div class="row" hidden="{{ !_permissionsVal.create }}">
            <div class="col-md-2">
                <vaadin-text-field id="QtyforMeasId" name="QtyforMeasName" label="Quantidade por Unid. Medida " class="alignRight" value="{{QtyforMeas}}" disabled></vaadin-text-field>
            </div>

            <div class="col-md-2">
                <vaadin-text-field id="QtyforMeasId" name="QtyforMeasName" label="Quantidade por Unid. Medida " class="alignRight" value="{{QtyforMeas}}" disabled></vaadin-text-field>
            </div>

            <div class="col-md-2">
                <vaadin-text-field id="amountId" name="amountName" class="alignRight" label="Valor total" value="{{amount}}" on-value-changed="_calcTotals" disabled> <div slot="suffix">€</div></vaadin-text-field>
            </div>
            <div class="col-md-2">
                <vaadin-text-field id="grupoRegistoIvaProduto" name="grupoRegistoIvaProduto" label="Grupo Registo IVA Produto" class="alignRight" value="{{grupoRegistoIvaProduto}}" maxlength="10"></vaadin-text-field>
            </div>

            <div class="col-md-3">
                <vaadin-text-field id="noContrato" name="noContrato" label="Nº Contrato" value="{{noContrato}}" disabled></vaadin-text-field>
            </div>

            <div class="col-md-1" hidden="{{ !_permissionsVal.create }}" style="padding-top:15px">
                <paper-button class="btnSave" on-tap="_add"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar</paper-button>
            </div>

            <div class="col-md-2">
                <such-selectbox id="codStockUnitId" value="{{codStockUnit}}" label="Código Localização" hidden
                                items="[[locationsresult]]"
                                text-path="value"
                                value-path="id"
                                fields='[{"field":"id", "name":"Código"}, {"field":"value", "name":"Descrição"}]'>
                </such-selectbox>
            </div>

            <div class="col-md-2">
                <such-selectbox id="mOpenOrderLinesId" value="{{_numb}}" label="Nº Produto" on-value-changed="_openOrderLinesOnChange" hidden
                                items="[[cbopenorderlines]]"
                                text-path="numb"
                                value-path="line_No"
                                fields='[{"field":"documentNO", "name":"Nº Documento"},{"field":"line_No", "name":"Nº Linha"},{"field":"numb", "name":"Nº Produto"}, {"field":"description", "name":"Descrição"}]'>
                </such-selectbox>
            </div>

            <div class="col-md-2">
                <vaadin-text-field id="interfaceId" name="interfaceId" label="Interface" value="{{interface}}" disabled hidden></vaadin-text-field>
            </div>
        </div>
        @* Grid *@

        <vaadin-grid id="gridneedshopping" aria-label="ProfileModelsTabel" items="[[data]]" class="grid" active-item="{{_SelectedLine}}" hidden="{{ _NotSelectedprodUnit }}">
            <vaadin-grid-column width="160px" resizable hidden>
                <template class="header">
                    <vaadin-grid-sorter path="interface">Interface</vaadin-grid-sorter>
                    <vaadin-grid-filter path="interface" />
                </template>
                <template>
                    {{item.interface}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="expectedReceptionDate">Data Receção Esperada</vaadin-grid-sorter>
                    <vaadin-grid-filter path="expectedReceptionDate" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-date-picker value="{{item.expectedReceptionDate}}" disabled="{{ !_permissionsVal.update }}"></vaadin-date-picker>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        [[ _parseExpectedReception(item.expectedReceptionDate) ]]
                    </template>*@
                    [[ _parseExpectedReception(item.expectedReceptionDate) ]]
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="dateByPriceSupplier">Data p/ Preço Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="dateByPriceSupplier" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-date-picker on-value-changed="_DatePriceGridChange" value="{{item.dateByPriceSupplier}}" disabled="{{ !_permissionsVal.update }}"></vaadin-date-picker>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        [[ _parseSupplierDateReception(item.dateByPriceSupplier) ]]
                    </template>*@
                    [[ _parseSupplierDateReception(item.dateByPriceSupplier) ]]
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="productNo">Nº Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="productNo" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-combo-box items="[[cbopenorderlinesGrid]]" disabled="{{ !_permissionsVal.update }}" id="mOpenOrderLinesIdGrid" on-value-changed="_openOrderGridLinesOnChange" item-value-path="id" item-label-path="numb" value="{{item.productNo}}">
                            <template>
                                <table width="300px">
                                    <tr>
                                        <td width="20%"><b>[[item.numb]]</b></td>
                                        <td width="80%">[[item.documentNO]]</td>
                                    </tr>
                                </table>
                            </template>
                        </vaadin-combo-box>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.productNo}}
                    </template>*@
                    {{item.productNo}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="description">Descrição Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="description" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.description}}" disabled></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.description}}
                    </template>*@
                    {{item.description}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="description2">Descrição 2 Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="description2" />
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.description2}}" disabled="{{ !_permissionsVal.update }}"></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.description2}}
                    </template>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="quantity">Quantidade </vaadin-grid-sorter>
                    <vaadin-grid-filter path="quantity" />
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.quantity}}" id="lineQuantity" disabled="{{ !_permissionsVal.update }}" pattern="^[1-9]\d*(\.\d+)?$" class="alignRight" on-value-changed="_lineCalcTotals"></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.quantity}}
                    </template>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="quantidadeDisponivel">Quantidade Disponível</vaadin-grid-sorter>
                    <vaadin-grid-filter path="quantidadeDisponivel" />
                </template>
                <template>
                    {{item.quantidadeDisponivel}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="quantidadeReservada">Quantidade Reservada</vaadin-grid-sorter>
                    <vaadin-grid-filter path="quantidadeReservada" />
                </template>
                <template>
                    {{item.quantidadeReservada}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="supplierNo">Nº Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="supplierNo" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.supplierNo}}" disabled></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.supplierNo}}
                    </template>*@
                    {{item.supplierNo}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="supplierName">Nome Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="supplierName" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.supplierName}}" disabled></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.supplierName}}
                    </template>*@
                    {{item.supplierName}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="subSupplierNo">Nº SubForncedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="subSupplierNo" />
                </template>
                <template>
                    {{item.subSupplierNo}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="subSupplierName">Nome SubFornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="subSupplierName" />
                </template>
                <template>
                    {{item.subSupplierName}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="unitMeasureCode">Unidade Medida</vaadin-grid-sorter>
                    <vaadin-grid-filter path="unitMeasureCode" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-combo-box items="[[unitmeasureresult]]" id="unitofMeasureCodeId" item-value-path="id" item-label-path="value" value="{{item.unitMeasureCode}}" disabled>
                            <template>
                                <table width="200px">
                                    <tr>
                                        <td width="20%">[[item.id]]</td>
                                        <td width="80%"><b>[[item.value]]</b></td>
                                    </tr>
                                </table>
                            </template>
                        </vaadin-combo-box>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.unitMeasureCode}}
                    </template>*@
                    {{item.unitMeasureCode}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="directUnitCost">Custo Unitário</vaadin-grid-sorter>
                    <vaadin-grid-filter path="directUnitCost" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.directUnitCost}}" id="lineUnitCost" class="alignRight" disabled><div slot="suffix" on-value-changed="_lineCalcTotals">€</div></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.directUnitCost}}€
                    </template>*@
                    {{item.directUnitCost}}€
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable hidden>
                <template class="header">
                    <vaadin-grid-sorter path="directUnitCostSubSupplier">Custo Unitário SubFornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="directUnitCostSubSupplier" />
                </template>
                <template>
                    {{item.directUnitCostSubSupplier}}€
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="supplierProductCode">Código Produto Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="supplierProductCode" />
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.supplierProductCode}}" disabled="{{ !_permissionsVal.update }}"></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.supplierProductCode}}
                    </template>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="supplierProductDescription">Descrição Produto Fornecedor</vaadin-grid-sorter>
                    <vaadin-grid-filter path="supplierProductDescription" />
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.supplierProductDescription}}" disabled="{{ !_permissionsVal.update }}"></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.supplierProductDescription}}
                    </template>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="quantitybyUnitMeasure">Quantidade por Unid. Medida</vaadin-grid-sorter>
                    <vaadin-grid-filter path="quantitybyUnitMeasure" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.quantitybyUnitMeasure}}" class="alignRight" disabled></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.quantitybyUnitMeasure}}
                    </template>*@
                    {{item.quantitybyUnitMeasure}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="totalValue">Valor Total</vaadin-grid-sorter>
                    <vaadin-grid-filter path="totalValue" />
                </template>
                <template>
                    @*<template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.totalValue}}" class="alignRight" disabled><div slot="suffix" on-value-changed="_lineCalcTotals">€</div></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.totalValue}}€
                    </template>*@
                    {{item.totalValue}}€
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="grupoRegistoIvaProduto">Grupo Registo IVA Produto</vaadin-grid-sorter>
                    <vaadin-grid-filter path="grupoRegistoIvaProduto" />
                </template>
                <template>
                    <template is="dom-if" if="{{ item.selected }}">
                        <vaadin-text-field value="{{item.grupoRegistoIvaProduto}}" maxlength="10" disabled="{{ !_permissionsVal.update }}"></vaadin-text-field>
                    </template>
                    <template is="dom-if" if="{{ !item.selected }}">
                        {{item.grupoRegistoIvaProduto}}
                    </template>
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column width="160px" resizable>
                <template class="header">
                    <vaadin-grid-sorter path="noContrato">Nº Contrato</vaadin-grid-sorter>
                    <vaadin-grid-filter path="noContrato" />
                </template>
                <template>
                    {{item.noContrato}}
                </template>
            </vaadin-grid-column>

            <vaadin-grid-column with="10%" hidden="{{ !_permissionsVal.delete }}">
                <template class="header">
                </template>
                <template>
                    <center>
                        <paper-button class="btnRemove" raised on-tap="_delete">Eliminar</paper-button>
                    </center>
                </template>
            </vaadin-grid-column>
        </vaadin-grid>

        <!-- Paper Dialog Movimentos de Projeto-->
        <paper-dialog id="dialog" class="dialgoBox">
            <h2 class="dialogTitle">Modelos de Requisições</h2>
            <vaadin-grid aria-label="Modelos de Requisições" class="editDialogGrid" selected-items={{selectedItems}} active-item="{{selectedItem}}" id="ModelRequisitionTable" items="[[resultModelRequisition]]">
                <vaadin-grid-selection-column auto-select>
                </vaadin-grid-selection-column>

                <vaadin-grid-column width="160px" resizable>
                    <template class="header">
                        <vaadin-grid-sorter path="requisitionNo"> Nº Requisição</vaadin-grid-sorter>
                        <vaadin-grid-filter path="requisitionNo" />
                    </template>
                    <template>
                        {{item.requisitionNo}}
                    </template>
                </vaadin-grid-column>

                <vaadin-grid-column width="160px" resizable>
                    <template class="header">
                        <vaadin-grid-sorter path="comments"> Descrição</vaadin-grid-sorter>
                        <vaadin-grid-filter path="comments" />
                    </template>
                    <template>
                        {{item.comments}}
                    </template>
                </vaadin-grid-column>

                <vaadin-grid-column width="160px" resizable>
                    <template class="header">
                        <vaadin-grid-sorter path="regionCode"> Cód. Região</vaadin-grid-sorter>
                        <vaadin-grid-filter path="regionCode" />
                    </template>
                    <template>
                        {{item.regionCode}}
                    </template>
                </vaadin-grid-column>

                <vaadin-grid-column width="160px" resizable>
                    <template class="header">
                        <vaadin-grid-sorter path="functionalAreaCode"> Cód. Área Funcional</vaadin-grid-sorter>
                        <vaadin-grid-filter path="functionalAreaCode" />
                    </template>
                    <template>
                        {{item.functionalAreaCode}}
                    </template>
                </vaadin-grid-column>

                <vaadin-grid-column width="160px" resizable>
                    <template class="header">
                        <vaadin-grid-sorter path="centerResponsibilityCode"> Cód. Centro Responsabilidade</vaadin-grid-sorter>
                        <vaadin-grid-filter path="centerResponsibilityCode" />
                    </template>
                    <template>
                        {{item.centerResponsibilityCode}}
                    </template>
                </vaadin-grid-column>

                @*<vaadin-grid-column width="160px" resizable>
            <template class="header">
                <vaadin-grid-sorter path="localCode"> Código Localização</vaadin-grid-sorter>
                <vaadin-grid-filter path="localCode" />
            </template>
            <template>
                [[_parseLocalCode(item.localCode)]]
            </template>
        </vaadin-grid-column>*@

                @*<vaadin-grid-column width="160px" resizable>
            <template class="header">
                <vaadin-grid-sorter path="unitFoodProduction">Unidade Produtiva Alimentação</vaadin-grid-sorter>
                <vaadin-grid-filter path="unitFoodProduction" />
            </template>
            <template>
                [[ _parseUnitFoodProd(item.unitFoodProduction) ]]
            </template>
        </vaadin-grid-column>*@

                @*<vaadin-grid-column width="160px" resizable>
            <template class="header">
                <vaadin-grid-sorter path="receivedDate">Data Receção</vaadin-grid-sorter>
                <vaadin-grid-filter path="receivedDate" />
            </template>
            <template>
                [[ _parseDateFormat(item.receivedDate) ]]
            </template>
        </vaadin-grid-column>*@
            </vaadin-grid>
            <div class="buttons">
                <paper-button class="btnSave" raised on-tap="_confirm"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp; Criar</paper-button>
                <paper-button class="btnRemove" dialog-dismiss><i class="fa fa-undo" aria-hidden="true"></i>&nbsp; Cancel</paper-button>
            </div>
        </paper-dialog>
        <paper-dialog id="dlgDate" style="height:270px; width:300px">
            <div>
                <vaadin-date-picker label="Data Receção Esperada" id="dpExpectedReceiptDateDlg" name="dpExpectedReceiptDateDlg" value="[[_expectedReceiptDate]]" required error-message="Este campo é obrigatório"></vaadin-date-picker>
            </div>
            <div>
                <vaadin-date-picker label="Data p/ Preço Fornecedor" id="dpPricesDate" name="dpPricesDate" value="[[_pricesDate]]" required error-message="Este campo é obrigatório"></vaadin-date-picker>
            </div>
            <div class="buttons">
                <paper-button raised class="btnEdit" on-tap="_openReqModelDlg">Seguinte</paper-button>
                <paper-button raised class="btnRemove" dialog-dismiss>Cancelar</paper-button>
            </div>
        </paper-dialog>

        <div class="marginSpace" hidden="{{ !_permissionsVal.update }}">
            <paper-button raised id="btnAddNew" class="btnEdit" on-tap="_update" hidden="{{ _NotSelectedprodUnit }}"><i class="fa fa-floppy-o" aria-hidden="true"></i>&nbsp; Guardar</paper-button>
            <paper-button raised id="btnCancel" class="btnRemove" on-tap="_cancel" hidden="{{ _NotSelectedprodUnit }}"><i class="fa fa-undo" aria-hidden="true"></i>&nbsp; Cancelar</paper-button>
        </div>

        <paper-toast id="ToastMessage" duration="4000" horizontalAlign="right" class="toastSuccess">&nbsp;<i class="fa fa-check fa-lg" aria-hidden="true"></i></paper-toast>
        <paper-toast id="ToastError" duration="4000" horizontalAlign="right" class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i></paper-toast>

        <paper-toast id="ToastMessageMultiple" duration="60000" horizontalAlign="right" class="toastMultiple">
            <template is="dom-repeat" items="{{ datarequesition.eMessages }}">
                <template is="dom-if" if="{{ _isError(item.type) }}">
                    <div class="toastError">&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true">{{ item.message }}</i></div>
                </template>
                <template is="dom-if" if="{{ !_isError(item.type) }}">
                    <div class="toastSuccess">&nbsp;<i class="fa fa-check" aria-hidden="true">{{ item.message }}</i></div>
                </template>
            </template>

            <div style="text-align: right;">
                <paper-button id="btnCloseMultipleToastMessageDlg" horizontalAlign="right" on-tap="_toggleToastMultiple">Fechar</paper-button>
            </div>
        </paper-toast>

    </template>
    <script>
        document.addEventListener('WebComponentsReady', function () {
            Polymer({
                is: 'x-needshopping',
                properties: {
                    _SelectedLine: {
                        observer: '_lineSelected'
                    },
                    selectedItems: {
                        type: Array
                    },
                    selectedItem: {
                        type: Array
                    },
                    prodUnitNo: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    type: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    armazem: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    descriptionUnit: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _expectedReceiptDate: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _pricesDate: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    codStockUnit: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    supplierNo: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    productNo: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    prodDescription: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    unitofMeasureCode: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    qty: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    QtyforMeas: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    unitCost: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    amount: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    SupplierName: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _permissionsVal: {
                        type: Array
                    },
                    _permissionssubMenu: {
                        type: Boolean,
                        value: false
                    },
                    _NotSelectedprodUnit: {
                        type: Boolean,
                        value: false
                    },
                    _documentNo: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _lineNo: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    _numb: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _documentNOGrid: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _prodArea: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    _lineNoGrid: {
                        type: Number,
                        notify: true,
                        value: ""
                    },
                    _numbGrid: {
                        type: String,
                        notify: true,
                        value: ""
                    },
                    prodUnit: {
                        type: Object,
                        value: @Html.Raw(Json.Serialize(ViewBag.ProductivityUnit)),
                    }
                },
                observers: [
                    '_onCacheLoaded(locationsresult)'
                ],

                _parseExpectedReception: function (date) {
                    if (date != null && date != "") {
                        var x = date.split("-");
                        return x[2] + "-" + x[1] + "-" + x[0];
                    }
                    return "";
                },
                _parseSupplierDateReception: function (date) {
                    if (date != null && date != "") {
                        var x = date.split("-");
                        return x[2] + "-" + x[1] + "-" + x[0];
                    }
                    return "";
                },

                _onCacheLoaded: function (locationsresult) {
                    if (!this.Flag) {
                        var prodUnitId = @ViewBag.ProductivityUnitId;
                        var prodUnitDesc = @Html.Raw(Json.Serialize(ViewBag.ProductivityUnitDesc));
                        //this._prodArea = @ViewBag.ProductivityArea;

                        //get premissions to CRUD
                        this._permissionsVal = @Html.Raw(Json.Serialize(@ViewBag.UPermissions));
                        if (this._permissionsVal.create == false && this._permissionsVal.update == false) {
                            this._permissionssubMenu = true;
                        }
                        if (prodUnitId != null && prodUnitDesc != "") {
                            this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                            this.$.ajax_getgrid.params = {
                                "type": this.type
                            };
                            this.$.ajax_getgrid.generateRequest();
                            this.$.grid_databound_ajax.generateRequest();
                        } else {
                            this.$.ajax_getgrid.body = JSON.stringify(null);
                            this.$.ajax_getgrid.generateRequest();
                            this.$.grid_databound_ajax.generateRequest();
                        }
                        this.Flag = true;
                    }
                },
                ready: function () {
                    var prodUnitId = @ViewBag.ProductivityUnitId;
                    var prodUnitDesc = @Html.Raw(Json.Serialize(ViewBag.ProductivityUnitDesc));
                    var typeId = @Html.Raw(Json.Serialize(ViewBag.Type));
                    var armazem = @Html.Raw(Json.Serialize(ViewBag.ProductivityArmazem));
                    //get premissions to CRUD
                    this._permissionsVal = @Html.Raw(Json.Serialize(@ViewBag.UPermissions));
                    if (this._permissionsVal.create == false && this._permissionsVal.update == false) {
                        this._permissionssubMenu = true;
                    }
                    if (prodUnitId != null && prodUnitDesc != "") {
                        this.prodUnitNo = prodUnitId;
                        this.descriptionUnit = prodUnitDesc;
                        this.type = typeId;
                        this.armazem = armazem;
                    } else {
                        this.prodUnitNo = "";
                        this.descriptionUnit = "";
                        this.type = "";
                        this.armazem = "";
                        this._NotSelectedprodUnit = true;
                        this.$.ajax_prodUnit.generateRequest();
                    }
                    this._setDefaultDateForDatePickers();
                },
                _setDefaultDateForDatePickers: function () {
                    try {
                        if (this.$.dpPricesDate == null)
                            return;

                        var today = new Date();

                        var dd = today.getDate();
                        if (dd < 10) {
                            dd = '0' + dd;
                        }

                        var mm = today.getMonth() + 1; //January is 0!
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        var yyyy = today.getFullYear();

                        var today = yyyy + '-' + mm + '-' + dd; //value="2018-07-31"

                        this.$.dpPricesDate.value = today;
                    }
                    catch (err) { }
                },
                _productChanged: function (e) {
                      //debugger
                    if (e.detail.value != null && e.detail.value != "") {
                        var linhaAcordo = this.$.cmbProducts.activeItem;

                        if (linhaAcordo != null) {
                            this.$.supplierProdDescription2Id.value = linhaAcordo.descricao2Produto;// linhaAcordo.descricaoProduto;
                            this.$.supplierNoId.value = linhaAcordo.noFornecedor;
                            this.$.SupplierNameId.value = linhaAcordo.nomeFornecedor;
                            this.$.subsupplierNoId.value = linhaAcordo.noSubFornecedor;
                            this.$.subSupplierNameId.value = linhaAcordo.nomeSubFornecedor;
                            this.$.unitofMeasureCodeId.value = linhaAcordo.um;
                            this.$.unitCostId.value = linhaAcordo.custoUnitario.toString();
                            this.$.supplierProdCodeId.value = linhaAcordo.codProdutoFornecedor.toString();
                            this.$.supplierProdDescriptionId.value = linhaAcordo.descricaoProdFornecedor.toString();
                            this.$.QtyforMeasId.value = linhaAcordo.qtdPorUm != null ? linhaAcordo.qtdPorUm.toString() : linhaAcordo.qtdPorUm;
                            this.$.qtyID.value = "0";
                            this.$.amountId.value = "0";
                            this.$.grupoRegistoIvaProduto.value = linhaAcordo.grupoRegistoIvaProduto != null ? linhaAcordo.grupoRegistoIvaProduto.toString() : linhaAcordo.grupoRegistoIvaProduto;
                            this.$.interfaceId.value = linhaAcordo.interface;
                            this.$.unitCostSubSupplierId.value = linhaAcordo.custoUnitarioSubFornecedor;
                            this.$.noContrato.value = linhaAcordo.noContrato;

                            this.$.mOpenOrderLinesId.value = linhaAcordo.codProduto;
                            //this.$.txtProdDescription.value = linhaAcordo.descricaoProduto;

                            this.$.ajax_GetQuantidades.params = { "produto": linhaAcordo.codProduto, "armazem": this.armazem};
                            this.$.ajax_GetQuantidades.generateRequest();
                        }
                    }
                    else {
                        this.$.supplierProdDescription2Id.value = "";
                        this.$.supplierNoId.value = "";
                        this.$.SupplierNameId.value = "";
                        this.$.subsupplierNoId.value = "";
                        this.$.subSupplierNameId.value = "";
                        this.$.unitofMeasureCodeId._clearSelection();;
                        this.$.unitCostId.value = "";
                        this.$.supplierProdCodeId.value = "";
                        this.$.supplierProdDescriptionId.value = "";
                        this.$.QtyforMeasId.value = "";
                        this.$.qtyID.value = "";
                        this.$.amountId.value = "";
                        this.$.grupoRegistoIvaProduto.value = "";
                        this.$.interfaceId.value = "";
                        this.$.unitCostSubSupplierId.value = "";
                        this.$.noContrato.value = "";

                        this.$.mOpenOrderLinesId.value = "";
                        this.$.qtyDisponivel.value = "";
                        this.$.qtyReservada.value = "";
                    }
                },
                _DatePriceGridChange: function (e) {
                    if (e.detail.value != null && e.detail.value != "" &&
                        this._numbGrid != null && this._numbGrid != "" &&
                        this._lineNoGrid != null && this._lineNoGrid != "" &&
                        this._documentNOGrid != null && this._documentNOGrid != "") {
                        this.$.ajax_result.body = JSON.stringify(this._numbGrid);
                        this.$.ajax_result.params = {
                            "documentNO": this._documentNOGrid,
                            "LineNo": this._lineNoGrid,
                            "date": e.detail.value
                        };
                        this.$.ajax_result.generateRequest();
                    } else {
                        if (e.detail.value != null &&
                            e.detail.value != "") {
                            this.$.ajax_nOrderGridLines.body = JSON.stringify(e.detail.value);
                            this.$.ajax_nOrderGridLines.generateRequest();
                        }
                    }
                },
                _DatePriceChange: function (e) {
                    if (e.detail.value != null && e.detail.value) {
                        this.$.products_ajax.body = JSON.stringify(e.detail.value);
                        this.$.products_ajax.params = {
                            "produtivityUnitId": this.prodUnit.productivityUnitNo,
                            "type": this.type
                        };
                        this.$.products_ajax.generateRequest();
                    }
                    if (e.detail.value != null && e.detail.value != "" && this._numb != null && this._numb != "") {
                        this.$.ajax_result.body = JSON.stringify(this._numb);
                        this.$.ajax_result.params = {
                            "documentNO": this._documentNO,
                            "LineNo": this._lineNo,
                            "date": e.detail.value
                        };

                        this.$.ajax_result.generateRequest();
                    } else {
                        if (e.detail.value != null &&
                            e.detail.value != "") {
                            this.$.ajax_nOrderLines.body = JSON.stringify(e.detail.value);
                            this.$.ajax_nOrderLines.generateRequest();
                        }
                    }

                    this.$.cmbProducts._clearSelection();
                    this.$.supplierProdDescription2Id.value = "";
                    this.$.qtyID.value = "";
                    this.$.supplierNoId.value = "";
                    this.$.subsupplierNoId.value = "";
                    this.$.SupplierNameId.value = "";
                    this.$.subSupplierNameId.value = "";
                    this.$.unitofMeasureCodeId._clearSelection();
                    this.$.unitCostId.value = "";
                    this.$.supplierProdCodeId.value = "";
                    this.$.supplierProdDescriptionId.value = "";
                    this.$.QtyforMeasId.value = "";
                    this.$.amountId.value = "";
                    this.$.grupoRegistoIvaProduto.value = "";
                    this.$.interfaceId.value = "";
                    this.$.unitCostSubSupplierId.value = "";
                    this.$.noContrato.value = "";

                    this.$.mOpenOrderLinesId.value = "";
                },
                _getgridResponse: function (data) {
                    if (data != null) {
                        if (data.detail.status === 200) {

                        } else {
                            this._openToastError("Occorreu um erro ao atualizar o Diário de requisição Unid. Produtiva.");
                        }


                    }
                },
                _openOrderLinesOnChange: function (e) {
                    if (e.detail.value) {
                        var proj = this.$.mOpenOrderLinesId.activeItem;
                        if (proj != null) {
                            this.$.supplierNoId.value = proj.buyFromVendorNo;
                            this.$.txtProdDescription.value = proj.description;
                            this.$.qtyID.value = "0";
                            this.$.QtyforMeasId.value = proj.qtyperUnitofMeasure.toString();
                            this.$.unitCostId.value = proj.unitCost.toString();
                            this.$.amountId.value = proj.amount.toString();
                            this.$.unitofMeasureCodeId.value = proj.unitofMeasureCode;
                            if (proj.locationCode != "") {
                                this.$.codStockUnitId.value = proj.locationCode;
                            }
                            this.$.ajax_supplierresult.body = JSON.stringify(this.$.supplierNoId.value);
                            this.$.ajax_supplierresult.generateRequest();
                        }
                    }
                },

                //Get all values from the product selected in the grid
                //Works with functions _GridprodChangeResult and _supplierGridResponse
                _openOrderGridLinesOnChange: function (e) {
                    var res = e.detail.value.split(" ");
                    var documentNo = res[0];
                    var lineNo = res[1];
                    var numb = res[2];
                    if (e.detail.value) {
                        var proj = this.cbopenorderlinesGrid.find(x => x.line_No == lineNo && x.documentNO == documentNo && x.numb == numb);
                        var oSel = this.data.find(x => x.selected);
                        if (oSel != undefined) {
                            oSel.supplierNo = proj.buyFromVendorNo;
                            oSel.description = proj.description;
                            oSel.quantitybyUnitMeasure = proj.qtyperUnitofMeasure;
                            oSel.unitMeasureCode = proj.unitofMeasureCode;
                            oSel.directUnitCost = proj.unitCost;
                            oSel.documentNo = proj.documentNO;
                            oSel.totalValue = proj.amount.toString();
                            oSel.productNo = numb;
                            this.$.amountId.value = proj.amount.toString();
                            if (proj.locationCode != "") {
                                oSel.localCode = proj.locationCode;
                            }
                            //get supplier name
                            this.$.ajax_supplierGridresult.body = JSON.stringify(oSel.supplierNo);
                            this.$.ajax_supplierGridresult.generateRequest();
                        }
                    }
                },
                _GridprodChangeResult: function (result2) {
                    if (result2 != null) {
                        var oSel = this.data.find(x => x.selected);
                        if (oSel != undefined) {
                            oSel.supplierNo = this.result2.buyFromVendorNo;
                            oSel.description = this.result2.description;
                            oSel.quantitybyUnitMeasure = this.result2.qtyperUnitofMeasure;
                            oSel.unitMeasureCode = this.result2.unitofMeasureCode;
                            oSel.directUnitCost = this.result2.unitCost;
                            oSel.documentNo = this.result2.documentNO;
                            oSel.totalValue = this.result2.amount;
                            oSel.productNo = this.result2.numb;
                            this.$.amountId.value = this.result2.amount;
                            if (this.result2.locationCode != "") {
                                oSel.localCode = this.result2.locationCode;
                            }
                            this.$.gridneedshopping.clearCache();
                            //get supplier name
                            this.$.ajax_supplierGridresult.body = JSON.stringify(oSel.supplierNo);
                            this.$.ajax_supplierGridresult.generateRequest();
                        }
                    }
                },
                //_resultResponse: function (result) {
                //    if (result != null) {
                //        var line = e.detail.value;
                //        var document = this.$.mOpenOrderLinesId.title;
                //        var proj = this.cbopenorderlines.find(x => x.line_No == line && x.documentNO == document);
                //        this.$.supplierNoId.value = proj.buyFromVendorNo;
                //        this.$.prodCodId.value = proj.description;
                //        this.$.qtyID.value = 0;
                //        this.$.QtyforMeasId.value = proj.qtyperUnitofMeasure;
                //        this.$.unitCostId.value = proj.unitCost;
                //        this.$.amountId.value = proj.amount;
                //        this.$.unitofMeasureCodeId.value = proj.unitofMeasureCode;
                //        if (proj.locationCode != "") {
                //            this.$.codStockUnitId.value = proj.locationCode;
                //        }

                //    }
                //    this.$.ajax_supplierresult.body = JSON.stringify(this.$.supplierNoId.value);
                //    this.$.ajax_supplierresult.generateRequest();
                //},

                // Get supplier name to the header
                _supplierResponse: function (supplierresult) {
                    if (supplierresult != null) {
                        this.$.SupplierNameId.value = this.supplierresult[0].value;
                    }
                },
                // Get supplier name to the grid
                _supplierGridResponse: function (supplierGridresult) {
                    if (supplierGridresult != null) {
                        var oSel = this.data.find(x => x.selected);
                        if (oSel != undefined) {
                            oSel.supplierName = this.supplierGridresult[0].value;
                            this.$.gridneedshopping.clearCache();
                        }
                    }
                },
                _addRequesition() {
                    $(this.$.btn_AddRequesition).addClass('disabled');
                    if (this._NotSelectedprodUnit == true) {

                        // Save to DB
                        this.$.ajax_requesitionupdate.body = JSON.stringify(this.data);
                        this.$.ajax_requesitionupdate.generateRequest();
                    }
                    else {

                        // Save to DB
                        this.$.ajax_requesitionupdate.body = JSON.stringify(this.data);
                        this.$.ajax_requesitionupdate.generateRequest();
                    }
                },

                _add() {
                    debugger;

                    if (this._NotSelectedprodUnit == true) {
                        if (this.$.dpExpectedReceiptId.value != null &&
                            this.$.dpVendedorPriceId.value != null &&
                            this.$.dpExpectedReceiptId.value != "" &&
                            this.$.dpVendedorPriceId.value != "" &&
                            this.$.prodUnitNoId.value != "" &&
                            this.$.descriptionUnitId.value != "" &&
                            this.$.grupoRegistoIvaProduto.value != "" &&
                            (this.$.qtyID.value != "" && parseFloat(this.$.qtyID.value) > 0))
                        //Validações
                        {
                            var newItem =
                                {
                                    productionUnitNo: this.$.prodUnitNoId.value,
                                    productUnitDescription: this.$.descriptionUnitId.value,

                                    expectedReceptionDate: this.$.dpExpectedReceiptId.value,
                                    dateByPriceSupplier: this.$.dpVendedorPriceId.value,
                                    productNo: this.$.cmbProducts.activeItem.codProduto,//this._numb,
                                    description: this.$.cmbProducts.valueText,//txtProdDescription.value,
                                    description2: this.$.supplierProdDescription2Id.value,
                                    quantity: this.$.qtyID.value,
                                    quantidadeDisponivel: this.$.qtyDisponivel.value,
                                    quantidadeReservada: this.$.qtyReservada.value,
                                    supplierNo: this.$.supplierNoId.value,
                                    subSupplierNo: this.$.subsupplierNoId.value,
                                    supplierName: this.$.SupplierNameId.value,
                                    subSupplierName: this.$.subSupplierNameId.value,
                                    unitMeasureCode: this.$.unitofMeasureCodeId.value,
                                    directUnitCost: this.$.unitCostId.value,
                                    supplierProductCode: this.$.supplierProdCodeId.value,
                                    supplierProductDescription: this.$.supplierProdDescriptionId.value,
                                    quantitybyUnitMeasure: this.$.QtyforMeasId.value,
                                    totalValue: this.$.amountId.value,
                                    grupoRegistoIvaProduto: this.$.grupoRegistoIvaProduto.value,
                                    interface: this.$.interfaceId.value,
                                    directUnitCostSubSupplier: this.$.unitCostSubSupplierId.value,
                                    noContrato: this.$.noContrato.value,


                                    localCode: this.$.codStockUnitId.value,
                                    documentNo: this.$._documentNo,
                                    openOrderNo: this.$._documentNo,
                                    orderLineOpenNo: this._lineNo,
                                    tipo: this.type
                                };


                            // Save to DB
                            if (this._NotSelectedprodUnit == false) {
                                this.$.ajax_update.body = JSON.stringify(this.data);
                                this.$.ajax_update.generateRequest();
                                this.$.gridneedshopping.clearCache();
                            } else {
                                this.$.ajax_Create.body = JSON.stringify(newItem);
                                this.$.ajax_Create.generateRequest();
                                this.$.gridneedshopping.clearCache();
                            }

                        } else {
                            this._openToastError("Os campos Data Receção Esperada, Data p/ Preço Fornecedor, Nº Unidade Produtiva, Descrição e Quantidade superior a 0 são obrigatorios.");
                        }
                    }
                    else {
                        if (this.$.dpExpectedReceiptId.value != null &&
                            this.$.dpVendedorPriceId.value != null &&
                            this.$.dpExpectedReceiptId.value != "" &&
                            this.$.dpVendedorPriceId.value != "" &&
                            (this.$.qtyID.value != "" && parseFloat(this.$.qtyID.value) > 0))
                        //Validações
                        {
                            var priceAgreementId = "";
                            var priceAgreementInfo = this.$.cmbProducts != null ? this.$.cmbProducts.activeItem : null;
                            if (priceAgreementInfo != null)
                                priceAgreementId = priceAgreementInfo.noProcedimento;

                            var newItem =
                                {
                                    productionUnitNo: this.$.prodUnitNoId.value,
                                    productUnitDescription: this.$.descriptionUnitId.value,
                                    expectedReceptionDate: this.$.dpExpectedReceiptId.value,
                                    dateByPriceSupplier: this.$.dpVendedorPriceId.value,
                                    localCode: this.$.codStockUnitId.value,
                                    productNo: this.$.cmbProducts.activeItem.codProduto,
                                    supplierNo: this.$.supplierNoId.value,
                                    subsupplierNo: this.$.subsupplierNoId.value,
                                    description: this.$.cmbProducts.valueText,
                                    description2: this.$.supplierProdDescription2Id.value,
                                    unitMeasureCode: this.$.unitofMeasureCodeId.value,
                                    quantity: this.$.qtyID.value,
                                    quantidadeDisponivel: this.$.qtyDisponivel.value,
                                    quantidadeReservada: this.$.qtyReservada.value,
                                    quantitybyUnitMeasure: this.$.QtyforMeasId.value,
                                    directUnitCost: this.$.unitCostId.value,
                                    totalValue: this.$.amountId.value,
                                    grupoRegistoIvaProduto: this.$.grupoRegistoIvaProduto.value,
                                    supplierProductCode: this.$.supplierProdCodeId.value,
                                    supplierProductDescription: this.$.cmbProducts.valueText,
                                    supplierName: this.$.SupplierNameId.value,
                                    subsupplierName: this.$.subSupplierNameId.value,
                                    interface: this.$.interfaceId.value,
                                    directUnitCostSubSupplier: this.$.unitCostSubSupplierId.value,
                                    noContrato: this.$.noContrato.value,

                                    tipo: this.type
                                };

                            // Save to DB
                            if (this._NotSelectedprodUnit == false) {
                                this.$.ajax_Create.body = JSON.stringify(newItem);
                                this.$.ajax_Create.generateRequest();
                                this.$.gridneedshopping.clearCache();
                            } else {
                                this.$.ajax_update.body = JSON.stringify(this.data);
                                this.$.ajax_update.generateRequest();
                                this.$.gridneedshopping.clearCache();
                            }

                        }
                        else {
                            this._openToastError("Os campos Data Receção Esperada, Data p/ Preço Fornecedor e Quantidade superior a 0 são obrigatorios.");
                        }
                    }

                },
                _update: function () {
                    this.$.ajax_update.body = JSON.stringify(this.data);
                    this.$.ajax_update.generateRequest();
                },
                _cancel: function () {
                    var prodUnitId = @ViewBag.ProductivityUnitId;
                    this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                    this.$.ajax_getgrid.generateRequest();
                    this.$.gridneedshopping.clearCache();
                },
                _delete: function (e) {
                    //debugger;
                    var index = this.data.indexOf(e.model.item);
                    this.data.splice(index, 1);
                    // Save to DB
                    this.$.ajax_delete.body = JSON.stringify(e.model.item.lineNo);
                    this.$.ajax_delete.generateRequest();
                    this.$.gridneedshopping.clearCache();
                },
                _deleteResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.deletedata.eReasonCode === 1) {
                            this._openToast(this.deletedata.eMessage);
                            var prodUnitId = @ViewBag.ProductivityUnitId;
                            this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                            this.$.ajax_getgrid.generateRequest();
                            this.$.gridneedshopping.clearCache();
                            this.$.dialog.close();
                        } else {
                            this._openToastError(this.deletedata.eMessage);
                        }
                    } else {
                        this._openToastError("Occorreu um erro ao eliminar.");
                    }
                },
                _updateResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.updatedata.eReasonCode === 1) {
                            this._openToast(this.updatedata.eMessage);
                            var prodUnitId = @ViewBag.ProductivityUnitId;
                            this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                            this.$.ajax_getgrid.generateRequest();
                            this.$.gridneedshopping.clearCache();
                            this.$.dialog.close();
                        } else {
                            this._openToastError(this.updatedata.eMessage);
                        }
                    } else {
                        this._openToastError("Occorreu um erro ao atualizar.");
                    }
                },
                _createResponse: function (e) {
                    if (e.detail.status === 200) {
                        if (this.updatedata.eReasonCode === 1) {
                            this._openToast(this.updatedata.eMessage);
                            var prodUnitId = @ViewBag.ProductivityUnitId;

                            this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                            this.$.ajax_getgrid.generateRequest();
                            this.$.gridneedshopping.clearCache();

                            //this.$.prodUnitNoId.value = "";
                            //this.$.descriptionUnitId.value = "";
                            //this.$.dpExpectedReceiptId.value = "";
                            //this.$.dpVendedorPriceId.value = "";
                            this.$.supplierNoId.value = "";
                            this.$.subsupplierNoId.value = "";
                            this.$.qtyID.value = "";
                            this.$.QtyforMeasId.value = "";
                            this.$.unitCostId.value = "";
                            this.$.amountId.value = "";
                            this.$.supplierProdCodeId.value = "";
                            this.$.SupplierNameId.value = "";
                            this.$.subSupplierNameId.value = "";
                            this.$.codStockUnitId._clearSelection();
                            this.$.cmbProducts._clearSelection();
                            this.$.unitofMeasureCodeId._clearSelection();
                            this.$.interfaceId.value = "";
                            this.$.unitCostSubSupplierId.value = "";
                            this.$.noContrato.value = "";

                        } else {
                            this._openToastError(this.updatedata.eMessage);
                        }
                    } else {
                        this._openToastError("Occorreu um erro ao criar o registo.");
                    }
                },

                priceAgreementByVendor: function (e) {
                    if (e.detail.status === 200) {


                    } else {
                        this._openToastError("Occorreu um erro ao atualizar.");
                    }
                },
                _lineSelected: function (item) {
                    if (item != null) {
                        var oSel = this.data.find(x => x.selected);
                        if (oSel != undefined) {
                            oSel.selected = false;
                        }
                        var sel = this.data.find(x => x == item);
                        if (sel != undefined) {
                            this.data.find(x => x == item).selected = true;
                            if (item.dateByPriceSupplier != "" && item.dateByPriceSupplier != null) {
                                var dataprice = item.dateByPriceSupplier.split("-");
                                var datapriceSupp = dataprice[2] + "-" + dataprice[1] + "-" + dataprice[0];
                                this.$.ajax_nOrderGridLines.body = JSON.stringify(datapriceSupp);
                                this.$.ajax_nOrderGridLines.generateRequest();
                            }
                            this.$.gridneedshopping.clearCache();
                        }
                    }
                },

                //this function is the response, is only used when a different product is selected in the grid
                //get the result from getOpenOrderLine and add necessary values to the line selected in the grid
                //Works like a Cascading from kendo


                _openToast: function (message) {
                    this.$.ToastMessage.text = message;
                    this.$.ToastMessage.open();
                },
                _openToastError: function (message) {
                    this.$.ToastError.text = message;
                    this.$.ToastError.open();
                },
                _requestModels: function () {
                    //this.$.dialog.open();
                    this.$.dlgDate.open();
                    if (this.resultModelRequisition == null ||
                        this.resultModelRequisition == undefined ||
                        this.resultModelRequisition.length == 0) {
                        this._openToastError("Não existem Modelos de Requisições.");
                    }

                },
                _parseDateFormat: function (date) {
                    if (date != null && date != "") {
                        var x = date.split("-");
                        return x[2] + "-" + x[1] + "-" + x[0];
                    }
                },
                _parseLocalCode: function (param) {
                    if (param != undefined) {

                        var sel = this.locationsresult.find(x => x.id == param);
                        if (sel != undefined) {
                            return sel.value;
                        }
                    }
                    return "";
                },
                _parseUnitFoodProd: function (param) {
                    if (param != undefined) {
                        var sel = this.produnitresult.find(x => x.productivityUnitNo == param);
                        if (sel != undefined) {
                            return sel.description;
                        }
                    }
                    return "";
                },
                _confirm: function (selectedItem, selectedItems) {
                    //debugger;;
                    if (this.selectedItems != null && this.selectedItems != "") {

                        var selItms = this.selectedItems;
                        var date = this.$.dpPricesDate != null ? this.$.dpPricesDate.value : "";
                        var expectedReceipDate = this.$.dpExpectedReceiptDateDlg != null ? this.$.dpExpectedReceiptDateDlg.value : "";

                        //this.$.grid_generatebyreq_ajax.body = JSON.stringify({ "prodUnit": { "nºUnidadeProdutiva": this.prodUnitNo, "descrição": this.descriptionUnit }, "reqprodUnits": selItms, "pricesDate": date });
                        this.$.grid_generatebyreq_ajax.body = JSON.stringify({ "prodUnit": this.prodUnit, "reqModels": selItms, "pricesDate": date, "expectedReceipDate": expectedReceipDate, "Tipo": this.type });
                        this.$.grid_generatebyreq_ajax.generateRequest();
                    } else {
                        this._openToastError("Não foi selecionada nenhuma linha.");
                    }

                },
                _benbyreqResponse: function (e) {
                    var self = this;
                    if (e.detail.status === 200) {
                        if (this.genbyreqresult.eReasonCode === 1) {
                            var prodUnitId = @ViewBag.ProductivityUnitId;
                            this.$.ajax_getgrid.body = JSON.stringify(prodUnitId);
                            this.$.ajax_getgrid.generateRequest();
                            this.$.gridneedshopping.clearCache();
                            this._openToast(this.genbyreqresult.eMessage);
                            this.$.dialog.close();
                        }
                        else {
                            this._openToastError(this.genbyreqresult.eMessage);
                        }
                    }
                    else {
                        this._openToastError("Occorreu um erro ao atualizar o Diário de requisição Unid. Produtiva.");
                    }
                },
                _verificaMultiplo: function (e) {
                    //Verificar se Quantidade é multiplo da Quantidade por Unid. Medida
                    if (this.$.QtyforMeasId.value != null && this.$.QtyforMeasId.value > 0) {
                        if (this.qty % this.$.QtyforMeasId.value != 0) {
                            //não é multiplo e limpa o campo
                            this.qty = "";
                        }
                    }
                },

                //calculate the total value form the hader
                _calcTotals: function (e) {
                    switch (e.target.id) {
                        case "qtyID":
                            this.qty = e.detail.value.replace(",", ".");
                            break;
                        case "unitCostId":
                            this.unitCost = e.detail.value.replace(",", ".");
                            break;
                        case "amountId":
                            this.amount = e.detail.value.replace(",", ".");
                            break;
                        default:
                            break;
                    }

                    if (this.qty != null && this.qty != "" &&
                        this.unitCost != null && this.unitCost != "") {
                        this.amount = this.unitCost * this.qty;
                        this.amount = this.amount.toFixed(2);
                    }
                },
                //calculate the total value form the grid
                _lineCalcTotals: function (param) {
                    if (this.data != null) {
                        var res = this.data.find(x => x == this._SelectedLine);
                        if (res != null) {
                            var qnt = res.quantity;
                            var unitCost = res.directUnitCost;
                            switch (param.target.id) {
                                case "lineQuantity":
                                    qnt = param.target.value.replace(",", ".");
                                    res.quantity = qnt;
                                    break;
                                case "lineUnitCost":
                                    unitCost = param.target.value.replace(",", ".");
                                    res.unitCost = unitCost;
                                    break;
                                default:
                                    break;
                            }
                            if (qnt != "" && qnt != null && unitCost != "" && unitCost != null) {
                                res.totalValue = qnt * unitCost;
                            }
                            this.$.gridneedshopping.clearCache();
                        }
                    }
                },
                _prodUnitChange: function (e) {
                    if (e.detail.value != null && e.detail.value != "") {
                        var sel = this.prodUnitValresult.find(x => x.id == e.detail.value);
                        if (sel != undefined) {
                            this.$.prodUnitNoId.value = e.detail.value;
                            this.$.descriptionUnitId.value = sel.value;
                        }
                    }
                },

                _requesitionResponse: function (e) {
                    //debugger;;
                    if (e.detail.status === 200) {
                    //    this.$.ToastMessageMultiple.toggle();
                    //    this.datarequesition.eMessages = [];

                    //    this.$.ajax_getgrid.generateRequest();
                    //}

                        if (this.datarequesition.eReasonCode === 1) {
                            this._openToast(this.datarequesition.eMessage);
                        }
                        else {
                            if (this.datarequesition.eReasonCode === 55) {
                                this._toggleToastMultiple();
                            }
                            else {
                                this._openToastError(this.datarequesition.eMessage);
                            }
                        }
                        this.$.ajax_getgrid.generateRequest();
                    } else {
                        this._openToastError("Occorreu um erro na geração de requisições.");
                    }

                    $(this.$.btn_AddRequesition).removeClass('disabled');
                },

                _goBack: function (e) {
                    window.history.back();
                },
                _openReqModelDlg: function () {
                    var date = this.$.dpPricesDate.value;
                    if (this.$.dpExpectedReceiptDateDlg.validate() &&
                        this.$.dpPricesDate.validate()) {
                        this.$.dlgDate.close();
                        this.$.dialog.open();
                    }
                },

                _getQuantidadesResponse: function (e) {
                    if (this.quantidadesResult != null) {
                        this.$.qtyDisponivel.value = this.quantidadesResult.quantDisponivel;
                        this.$.qtyReservada.value = this.quantidadesResult.quantReservada;
                    }
                    else {
                        this.$.qtyDisponivel.value = "";
                        this.$.qtyReservada.value = "";
                    }
                },

                _isError: function (type) {
                    debugger;
                    if (type == 0 || type == 2 || type == 3)
                        return true;
                    else
                        return false;
                },

                _toggleToastMultiple: function () {
                    this.$.ToastMessageMultiple.duration = 0;
                    this.$.ToastMessageMultiple.toggle();
                    this.datarequesition.eMessages = [];
                },
            });
        });
    </script>

</dom-module>
